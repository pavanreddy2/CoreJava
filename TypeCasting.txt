TypeCasting:-
===========

DataTypes:-

Advantages: -
============
1) we are able to identify the memory size to store data on the basis of dataType.
2) we are able to identify the range value to assign to the variables.

Types of DataTypes: -

1) primitive DataType
     a) Numeric DataType
          x) Integral DataType     Size									Default Value
						  1) byte  -->   1 bytes of memory   ===> 			0
							2) short -->  2 bytes of memory  ====>        0
							3) int    --> 4 bytes of memory ===>          0
							4)long  --->  8 bytes of memory  ===>         0L
          y) Non-Integral DataType

						 1) float   --> 4 bytes of memory  ===>        0.0f
						 2) double  --> 8 bytes of memory   ===>       0.0d
     b) Non-Numeric DataType
				char       ---> 2 bytes of memory       ===>         ' '
				boolean    ---> 1 bit                    ===>       false

2) User Defined DataType
    classes, abstract Classes, interfaces, Array.

Note: No fixed memory allocations for the user defined DataTypes, the size of the data 
        is totally depending on the data at runtime.
Note: Defalut value for the user defined DataType is null.

Note : 1 byte is equivalent to eight bits.

=====================================================================================

==> To calculate the range for dataTypes, we are using Two Constants like 
      MIN_VALUE and MAX_VALUE
Note: Classes representation of Primitive DataTypes is called as Wrapper classes.
      
      DataTypes    Wrapper Classes

      byte ----> java.lang.Byte
      short ---> java.lang.Short
      int ------> java.lang.Integer
      long ----->java.lang.Long
      float -----> java.lang.Float
      double ------>java.lang.Double
      char  ==>  java.lang.Character ==>  No MIN and MAX
      boolean   ==> Boolean  ==> No MIN and MAX Value

============================================================================================


TypeCasting: -
==============
 process of converting data from one datatype to another datatype is called "Type Casting".


In java , we have Two Types of Type Casting.
1) Primitive DataType TypeCasting
2) User defined DataType TypeCasting.

User defined DataType TypeCasting:-
==================================
The process of converting data from one user defined dataType to another user defined dataType is 
called User defined DataType TypeCasting.
==> If we want to perform user defined dataType TypeCasting we need either "extend" or "implement" relation b/w two user defined DataType.


1) Primitive DataType TypeCasting: -
  =================================
  The process of converting data from one primitive dataType to another primitive DataType.

   2 Two Types:-
  ==============
  a) Implicit (or) Widening Type Casting: 
    
  b) Explicit (or) Narrowing Type Casting:

 Implicit (or) Widening Type Casting:  
=====================================
Process of converting data from lower DataType to higher DataType is called Implicit TypeCasting.It is also known as Widening Type Casting.
This TypeCasting is done automatically. we don't need to explicitly mention the dataType.

Advantages: -
========
1) It is safe because there is no chance to lose data.



To perform implicit TypeCasting, Java has provided a predefined chart.


		  1		2		2	  4      8        4       8	
		byte -> short -> char -> int -> long -> float -> double

Note : 
 1) Don't think lower dataType as less memory and less size and also higher DataType as high memory and high size.
 2) Here memory size is not a criteria.
 3) which dataType is able to store less Data i.e., Lower DataType and Which is store high Data i.e., Higher DataType.
 4) Here Size is not consider.


       
Example: 
   Class Room A :    25 Banches  --> per Bench 3 students --> 75 members
   Class Room B :    50 Banches  --> per Bench 1 student -->  50 members.

Here, Totally depending on the internal Data arrangement. on the basis of internal data Arrangement only, we are going to decide which data is higer and lower.
that means we are going to decide which dataType is store more data and less data.
==> Each and Every DataType is having its own internal data arrangement.

==> internal Data arrangement is different one dataType to another DataType.


Example : - 

     public class TypeCastingExample {
           public static void main (String[] args) {

             // variable type is int
              int x = 7;  //lower dataType
         
			// Automatically Converts the Integer type into float Type
               float y = x;
  
			System.out.println("Before Conversion: "+x);
			System.out.println("After Conversion: "+ y);	
              
            }

        }

Explicit (or) Narrowing Type Casting:
========================================
Converting data from higher DataType to lower DataType is called as Explicit DataType TypeCasting.It is also known as Narrowing TypeCasting.

It is done manually by the programmer which means we have to explicitly mentioned about the dataType to be converted. If we do not perform casting then compiler reports a compiler-time error.


1) In these TypeCasting there is chance of losing the Data.


     double -> float -> long -> int -> char -> short -> byte 


Example : - 

       public class ExplicitExample {

            public static void main (String[] args) {
             
			 //Variable type float 
  
                 float x = 7.98f;

      
                int y = x;
			}

          }


 



     







